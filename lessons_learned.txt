Here are some lessons I've learned while working on this project.


------------------------------------------------------------------------------
------  It is useful to create objects representing abstract things

When a user inputs a command, I originally translated it into a Python list
of one of several various formats. This was a bad idea. Later on, I decided
that it would be better to have a class called Command with various subclasses
such as MoveCmd, BuildBuildingCmd, and CollectResourceCmd etc.

Accessing various parts of a command via list indexing gave no hint on
what was being accessed. (And it was hard to keep track of it all, even without
having implemented all possible command types.) When I created instances of the
Command class, I could access the data with useful names.

Also, what I did at first made encapsulation impossible.

------------------------------------------------------------------------------
------  Encapsulation is good

Working with a simple interface to a class is easier than working with
different types of data arbitrarily put together in a Python list. Not only
is it easier to work with such classes, but later modifications are also
then easier to make. For example, I noticed this when I added a new way to
command units to move. If I was still stuck only using Python lists to
represent user commands, then the change would have been harder to make.

When I started this project in 2018, I had never heard of encapsulation
or information hiding. I hadn't yet heard about the idea of separating the
implementation from the interface. (I first read about it in 2020,
from the book "Code Complete 2" by Steve McConnell.)

Disclaimer: I have not yet refactored player.commands with encapsulation in mind.

------------------------------------------------------------------------------
------  Sacrificing usability to make programming slightly easier is NOT
------  worth it

At the beginning of this project, I made a design decision on how the
game_map indexing works. I'm pretty sure I knew it would make playing the
game slightly more difficult. However, it also made programming it slightly
easier. Making the game fun to play wasn't high on my priority list, and so
I decided to take the route that was easier in the short term.

After playing the game a decent amount, I realized that the confusion my
design decision causes wasn't worth making the programming slightly simpler,
and so I decided to change the game_map indexing to make it how it ought to be.
This change took a few hours to implement. Doing it right the first time
would have only cost me perhaps an extra 15 or 20 minutes.

------------------------------------------------------------------------------
------  Having no documentation at all can be a problem

While I've heard that too much documentation is a problem, I had too little.

I started working on this game in 2018. For two years, I had other priorities
and so did practically nothing on the game. When I decided to continue this
project, it had been long enough that I forgot how a user is supposed to enter
commands. Hence, I had to figure it out by reverse engineering the code that
I had written and by experimenting. This took longer than the time it would
have taken to write a simple manual/user guide.
